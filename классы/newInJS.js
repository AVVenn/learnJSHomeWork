// Конструкторы, создание объектов через "new"

// Обычный синтаксис {...} позволяет создать только один объект. Но зачастую нам нужно создать множество однотипных объектов, таких как пользователи, элементы меню и т.д.
// Это можно сделать при помощи функции-конструктора и оператора "new".
// _______________________________________________________________________________________________________________________
// Функция-конструктор
// Функции-конструкторы являются обычными функциями. Но есть два соглашения:
// 1) ИМЯ функции-конструктора должно НАЧИНАТЬСЯ с БОЛЬШОЙ буквы.
// 2) Функция-конструктор должна ВЫЗЫВАТЬСЯ при помощи оператора "new".

// ПРИМЕР 
// function User(name) {
//     this.name = name;
//     this.isAdmin = false;
//   }
//   let user = new User("Вася");
//   alert(user.name); // Вася
//   alert(user.isAdmin); // false


// Когда функция вызывается как new User(...), происходит следующее:

// 1. Создаётся новый пустой объект, и он присваивается this.
// 2. Выполняется код функции. Обычно он модифицирует this, добавляет туда новые свойства.
// 3. Возвращается значение this.

// function User(name) {
//     // this = {};  (неявно)
//     // добавляет свойства к this
//     this.name = name;
//     this.isAdmin = false;
//     // return this;  (неявно)
//   }

// То есть, результат вызова new User("Вася") – это тот же объект, что и:
// let user = {
//   name: "Вася",
//   isAdmin: false
// };
// _______________________________________________________________________________________________________________________
// Возврат значения из конструктора return

// Обычно конструкторы ничего не возвращают явно. Их задача – записать все необходимое в this, который в итоге станет результатом.

// Но если return всё же есть, то применяется простое правило:
// При вызове return с объектом, будет возвращён объект, а не this.
// При вызове return с примитивным значением, примитивное значение будет отброшено.
// _______________________________________________________________________________________________________________________
// Создание методов в конструкторе
// В this мы можем добавлять не только свойства, но и методы.
// Например, в примере ниже, new User(name) создаёт объект с данным именем name и методом sayHi:

// function User(name) {
//   this.name = name;
//   this.sayHi = function() {
//     alert( "Меня зовут: " + this.name );
//   };
// }
// let vasya = new User("Вася");
// vasya.sayHi(); // Меня зовут: Вася

/*
vasya = {
   name: "Вася",
   sayHi: function() { ... }
}
*/
// _______________________________________________________________________________________________________________________
// Создайте функцию-конструктор Calculator, который создаёт объекты с тремя методами:

// read() запрашивает два значения при помощи prompt и сохраняет их значение в свойствах объекта.
// sum() возвращает сумму введённых свойств.
// mul() возвращает произведение введённых свойств.

// Например:
// let calculator = new Calculator();
// calculator.read();

// alert( "Sum=" + calculator.sum() );
// alert( "Mul=" + calculator.mul() );
// _______________
// function Calculator (a, b) {
//     this.read = function () {
//         this.a = a;
//         this.b = b;
//     };
//     this.sum = function () {
//         return this.a + this.b; 
//     };
//     this.mul = function () {
//         return this.a * this.b;
//     };
// }

// let calculator = new Calculator (10, 32);
// calculator.read();
// console.log (calculator.sum());
// console.log (calculator.mul());
// _______________________________________________________________________________________________________________________
// Напишите функцию-конструктор Accumulator(startingValue).
// Объект, который она создаёт, должен уметь следующее:

// Хранить «текущее значение» в свойстве value. Начальное значение устанавливается в аргументе конструктора startingValue.
// Метод read() использует prompt для получения числа и прибавляет его к свойству value.
// Таким образом, свойство value является текущей суммой всего, что ввёл пользователь при вызовах метода read(), с учётом начального значения startingValue.

// Ниже вы можете посмотреть работу кода:

// let accumulator = new Accumulator(1); // начальное значение 1

// accumulator.read(); // прибавит ввод prompt к текущему значению
// accumulator.read(); // прибавит ввод prompt к текущему значению

// alert(accumulator.value); // выведет сумму этих значений
// _______________
// function Accamulator (startingValue) {
//     this.value = startingValue;
//     this.read = function () {
//         this.value +=  +prompt(`Введите число`);
//         return console.log(this.value);
//     };
// }
// let accumulator = new Accamulator(1); 

// accumulator.read();
// accumulator.read();

