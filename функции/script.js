// function имя(параметры) {
//     ...тело...
//   }   - объявление функции

// имя()  - для вызова функции

// Переменные, объявленные внутри функции, видны только внутри этой функции.

// Функция обладает полным доступом к внешним переменным и может изменять их значение.
// Функции имеют доступ к внешним переменным. Но это работает только изнутри наружу. Код вне функции не имеет доступа к её локальным переменным.

// Если одноимённая переменная объявляется внутри функции, тогда она перекрывает внешнюю. Например, Внешняя будет проигнорирована.

// function showMessage(from, text) - from и text  аргументы 
// showMessage("Аня"); - если вызван только один аргумент , то второй будет undefined

// В JavaScript параметры по умолчанию вычисляются каждый раз, когда функция вызывается без соответствующего параметра.

// Функция может вернуть результат, который будет передан в вызвавший её код.
// Директива return может находиться в любом месте тела функции. Как только выполнение доходит до этого места, функция останавливается, и значение возвращается в вызвавший её код (присваивается переменной result выше).

// Вызовов return может быть несколько.

// Возможно использовать return и без значения. Это приведёт к немедленному выходу из функции.

// _________________________________________________________________________________________________________________________________
//  function Expression


// let sayHi = function() {
//     alert( "Привет" );
//   };


// Function Expression использует внутри себя инструкции присваивания let sayHi = ...; как значение. Это не блок кода, а выражение с присваиванием. Таким образом, точка с запятой не относится непосредственно к Function Expression, она лишь завершает инструкцию.

// function sayHi() {
//     alert( "Привет" );
//   }
//   alert( sayHi ); // выведет код функции потому что нет () после имени функции sayHi


// Function Expression в сравнении с Function Declaration


// Function Expression создаётся, когда выполнение доходит до него, и затем уже может использоваться.
// После того, как поток выполнения достигнет правой части выражения присваивания let sum = function… – с этого момента, функция считается созданной и может быть использована (присвоена переменной, вызвана и т.д. ).

// С Function Declaration всё иначе.
// Function Declaration можно использовать во всем скрипте (или блоке кода, если функция объявлена в блоке).
// Другими словами, когда движок JavaScript готовится выполнять скрипт или блок кода, прежде всего он ищет в нём Function Declaration и создаёт все такие функции. Можно считать этот процесс «стадией инициализации».
// И только после того, как все объявления Function Declaration будут обработаны, продолжится выполнение.
// В результате, функции, созданные, как Function Declaration могут быть вызваны раньше своих определений.

// sayHi("Вася"); // Привет, Вася
// function sayHi(name) {
//   alert( `Привет, ${name}` );    - будет работать , если бы это было Function Expression, то такой код вызовет ошибку
// }

// __________________________________________________________________________________________________________________________________________
// Создайте функцию sayError(), которая будет выводить (при помощи диалогового окна alert) сообщение с текстом «Some error occurred!».
// function sayError () {
//     alert (`Some eror occured!`)
// }
// sayError ();
// __________________________________________________________________________________________________________________________________________

// Создайте функцию showError(x), которая будет выводить (при помощи диалогового окна alert) сообщение с текстом «Error X occurred!», 
// где Х — текст из аргумента функции (например, вызов showError(‘Out of memory’) должен вывести сообщение «Error Out ofmemory occurred!»).
// function showEror (x){
//     alert (`Error ${x} occured!`);
// }
// showEror (`out of memory`);
// __________________________________________________________________________________________________________________________________________

// Создайте функцию createHeaders(N), которая создаст на странице N заголовков второго уровня (<h2>) с надписями Header1, Header2 … HeaderN.
// function createHeaders (N) {
//     for (let i = 0; i <= N; i++) {
//         document.write ("<h2>Header "+i+" </h2>");
//     }
// }
// createHeaders (5);

// __________________________________________________________________________________________________________________________________________
// Создайте функцию checkPassword(x), которая вернет значение true, если в качестве аргумента в нее будет передан допустимый пароль (одно из значений «Step», «Web» или «JavaScript»). Иначе функция должна вернуть false.

// function  checkPassword (x) {
//     if (x === "step" || x === "web" || x === "JavaScript") {
//         return true;
//     } else { return false}
// }  
// alert (checkPassword (prompt ('Введите ваш пароль')));

// __________________________________________________________________________________________________________________________________________
// Создайте функцию определения знака числа sign(x), которая вернет значение –1, если аргумент «х» — отрицательное число, 1 — если положительное, 
// 0 — если аргумент «х» равен нулю.

// function sign (x) {
//     if ( x < 0) {
//         return -1;
//     } else if ( x > 0 ) {
//         return 1;
//     } else if ( x === 0) {
//         return 0;
//     } 
// } 
// alert (sign (+prompt (`Введите ваше число и мы определим знак`)));

// __________________________________________________________________________________________________________________________________________

// Предложите имя (согласно правилам именования) и создайте функцию, которая будет возвращать на-  звания дней недели по их номеру:
//  0-Sunday, 1-Monday, 2-Tuesday, 3-Wednesday, 4-Thursday, 5-Friday, 6-Saturday.
// function getNumberDay (x) {
//     switch (x)  {
//         case 0: 
//             return "Sunday";
//             break;
//         case 1:
//             return "Monday";
//             break;
//         case 2: 
//             return "Tuesday";
//             break;
//         case 3: 
//             return "Wednesday";
//             break;
//         case 4: 
//             return "Thursday";
//             break;
//         case 5:
//             return "Friday";
//             break;
//         case 6:
//             return "Saturday";
//             break;
//     }
// }
// alert ( getNumberDay (+prompt(`Введите порядковый номер дняя недели`)) );  нужны ли брейки в свитче ,если есть ретерн

// __________________________________________________________________________________________________________________________________________
// Написать функцию, которая принимает 2 числа и возвращает меньшее из них.

// function showSmall(a, b){
//     if (a < b || a === b ) {
//         return a;
//     } else {
//         return b;
//     }
// }
// alert ( showSmall(+prompt ('Введите первое число'), +prompt('Введите второе число')));

// __________________________________________________________________________________________________________________________________________
// Написать функцию, которая возводит переданное число в указанную степень.

// function getPow (x, n) {
//     return Math.pow (x, n);
// } 
// alert ( getPow (+prompt(`Введите число,которое хотите возвести в степень`), +prompt(`В какую степень хотите возвести?`)) );

// __________________________________________________________________________________________________________________________________________
// Написать функцию, которая принимает 2 числа и знак (+ - * /), считает пример и возвращает результат.

// function getResult (a, b , c) {
//     if ( b === '+') {
//         return a+c;
//     }
//     if ( b === "-" ) {
//         return a-c;
//     }
//     if ( b === "*") {
//         return a*c;
//     }
//     if (b === "/") {
//         return a / c;
//     }
// }
// alert (getResult (+prompt(`Введите первое число `), prompt(`Введите знак + или - или * или /`), +prompt(`Введите второе число `)));

// __________________________________________________________________________________________________________________________________________
//  Написать функцию, которая проверяет, является ли переданное ей число простым.

// function getSimpleNumber (a){
//     for (let i = 2; i < a; i++) {
//         if (a % i === 0) {
//             return "не простое";
//         }  else {
//             return "простое"
//         }
//     }
// }
// console.log (getSimpleNumber (+prompt(`Введите число`)))

// __________________________________________________________________________________________________________________________________________
// Написать функцию, которая принимает число и выводит таблицу умножения для этого числа. Вызовите функцию для всех чисел от 2 до 9.

// function showTable (x) {
//     for (let i = 1; i < 10 ; i++) {
//     document.write (`<p>${x}*${i} = ${x*i}</p>`);
//     }
// }
// showTable (2);
// showTable (3);
// showTable (4);
// showTable (5);
// showTable (6);
// showTable (7);
// showTable (8);
// showTable (9); Придумать как выводить столбики по ширине

// __________________________________________________________________________________________________________________________________________
// Написать функцию, которая реализует работу оператора %. Функция принимает 2 параметра и возвращает остаток от деления первого параметра на второй. В функции использовать только + - * /, оператор % не использовать. 

// function getRemainder (Number1, Number2){
//     if ( Number1/Number2 !==0) {
//         return Number1 - Number2*Math.floor(Number1/Number2);
//     } 
//     if (Number1/Number2 === 0) {
//         return 0
//     }
// }
// console.log ( getRemainder (+prompt(`Введите первое число `), +prompt(`Введите второе число`)));

// __________________________________________________________________________________________________________________________________________


// Написать функцию, которая принимает от 1 до 5 чисел и возвращает их сумму.
// Вариант 1
// function getSum () {
//     let sum = 0;
//     for (let i = 0; i <= 5; i++) {
//     let randomNumber = prompt (`Введите число`);
//     if ( randomNumber === null){
//         break;
//     } else {
//     sum += +randomNumber;
//         }
//     }
//     return sum;
// }
// alert (getSum());

// Вариант 2
// function getSum (Number1 = 0, Number2 = 0,  Number3 = 0,  Number4 = 0,  Number5 = 0) {
//     let sum = +Number
//     if (Number1 =)
// }


// __________________________________________________________________________________________________________________________________________

// Написать функцию, которая принимает от 1 до 5 чисел и возвращает большее из них
// function getMax (){
//     let max = 0;
//     for (let i = 0; i <= 5; i++) {
//     let randomNumber = prompt('Введите число');
//     if (randomNumber === null || randomNumber === "") {
//         break;
//     } 
//     randomNumber = Number(randomNumber);
//     if (max < randomNumber) {
//         max = randomNumber
//     }
//     }
//     return max;
//     }
//     alert (getMax());

// __________________________________________________________________________________________________________________________________________

// Написать функцию, которая выводит все четные или нечетные числа, в указанном пользователем диапазоне. Какие числа выводить, 
// определяется третьим параметром типа bool (true – четные, false – нечетные).

// function getNumbers (startNumber = +prompt (`Введите начальное значение диапазона`), endNumber = +prompt (`Введите конечное значение диапазона`),bool = prompt(`Напишите "четные" или "нечетные"`)) {
//     let arr = [];
//     for (let i = startNumber; i >= startNumber && i <= endNumber; i++) {
//         if ( i%2 === 0 && bool === "четные") {
//             arr.push(i);
//             continue;
//         }
//         if (i%2 !== 0 && bool === "нечетные") {
//             arr.push(i);
//         }
//     }
//     return arr;
// }
// alert (getNumbers());

// Написать функцию, которая принимает дату (день, месяц, год) и возвращает дату следующего дня в виде строки  «дд.мм.гггг». Проверку на високосный год желательно написать отдельной функцией.

// function nextDate (day = +prompt (`Введите число "1-31"`), mounth = +prompt(`Введите месяц 1-12`), age = +prompt(`Введите год`)) {
//     if (((day >= 32 || day < 1) && ( mounth === 1 || mounth === 3 || mounth === 5 || mounth === 7 || mounth === 8 || mounth === 10 || mounth === 12 )) || ( ( day >= 31 || day < 1) && ( mounth === 4 || mounth === 6 || mounth === 9 || mounth === 11)) || ((day >= 29 || day < 1) && mounth === 2) || mounth >= 13 ) {
//         return `Введенные значения не корректны!`;
//     }
//     day +=1;
//     if (day > 31 && ( mounth === 1 || mounth === 3 || mounth === 5 || mounth === 7 || mounth === 8 || mounth === 10 || mounth === 12 ) ){
//         mounth += 1;
//         day = 1;
//     } else if ( day > 30 && ( mounth === 4 || mounth === 6 || mounth === 9 || mounth === 11 ) ) {
//         mounth += 1;
//         day = 1;
//     } else if ( day > 28 && mounth === 2 ) {
//         mounth +=1;
//         day = 1;
//     }
//     if ( mounth > 12 ) {
//         age += 1;
//         mounth = 1;
//     }
//     return `${day}.${mounth}.${age}`;
// }
//     alert (nextDate());


// ________https://learn.javascript.ru/function-declaration-expression_____________________________________________________

// let result = (function () {
//     let name = "Barry";
//     return name;
// })();
// alert (result);  // IIFE  - result = Barry



//  __________________________________________________________________________________________________________________________
//  __________________________________________________________________________________________________________________________

// / 1. создать функцию которая принимает имя пользователя
// и возвращает строку вида "Привет NAME"
// создать функцию которая принимает имя пользователя
// и возвращает строку вида "Hello NAME"
// создать функцию которая принимает имя пользователя
// и возвращает строку вида "Ciao NAME"

// написать функцию sayHello которая принимает имя пользователя
// и коллбэк (функция переводчик)

// при запуске sayHello она должна возвести имя пользователя в верхний регистр
// после чего передать измененное имя в КОЛБЭК

// italian('john') ===>>> 'Ciao john'
// english('joHN') ===>>> 'Hello joHN'

// sayHello('john', english) ===>>> 'Hello JOHN'
// sayHello('john', italian) ===>>> 'Ciao JOHN'



// function russian (name) {
//     console.log (`Привет ${name}`);
// }

// function english (name) {
//     console.log (`Hello ${name}`);
// }

// function italian (name) {
//     console.log (`Ciao ${name}`);
// }

// function sayHello (name, language) {
//     language(name);
// }

// sayHello ("Vasiliy", russian);


//  _________________________________________________________________________________________________________________________

// 1. Создать функцию, которая принимает массив и callback. Функция должна каждый элемент массива обрабатывать callback’ом.
// function getUp (str) { // Элемент массива ,котторый мы должны преобразовать 
//     return str.toUpperCase(); // Возвращает преобразованный элемент (str)  массива.
// }
// function getDown (str) { 
//     return str.toLowerCase(); 
// }
// function getResult (array, callback) { //  мы принимаем массив и должны выбрать одну из написанных функций getUp или getDown
//     let arr = []; // Создали новый пустой массив для записи измененных значений принятого массива array  
//     for (let i = 0; i < array.length; i++) { 
//         arr.push(callback(array[i])); // записываем в массив arr результат функции callback, функция callback преобразует элемент массива array; 
//     } return arr;
// }
// alert(getResult(["andry", "STEPAN", "PAVEL", "olga", "alexander", "VALERA"], getDown));

//  _________________________________________________________________________________________________________________________

// 2. Создать функцию sumTo, которая принимает два числа и callback. Задача функции складывать 2 числа, а задача callback’a заставлять функцию sumTo возвращать результат в виде числа, строки или логического типа данных.

// function inString (x) {
//     return  String(x);
// }

// function inNumber (x) {
//     return Number(x);
// }

// function inBoolean (x) {
//     return Boolean(x);
// }

// function sumTo (number1, number2, callback) {
//     let x = number1 + number2;
//     return callback(x);
// } 
// alert (sumTo(1,2, inString));
// alert (typeof ( sumTo(1,2,inString)));

//  _________________________________________________________________________________________________________________________

// 3. Создать функцию checkLogin, которая принимает 4 параметра. 1 параметр - это логин, введенный пользователем, 2 – правильный логин, 3 – callback, который вызовется если логин верный, 4 – callback, который вызовется если логин ложный.

// function trueLogin () {
//     return `You input correct login!`;
// }

// function falseLogin () {
//     return `You input incorrect login!`;  
// }

// function checkLogin (userLogin, correctLogin, callbackIfTrue, callbackIfFalse) {
//     if (userLogin === correctLogin) {
//         return callbackIfTrue();
//     } else {
//         return callbackIfFalse();
//     }
// }

// alert(checkLogin (prompt(`Введите ваш логин`), "JS", trueLogin, falseLogin));


// --------------------------------------------------------
// function trueLogin (){
//     return `You input correct login!`;
// }

// function falseLogin () {
//     return `You input incorrect login!`;   // а , как вернуть алерт в теле функции коллбэка, если возврат функции будет undefined?
// }                                            // Или может проще всегда писать что будет возвращать функция

// function getResult (getTrue) {
//     return getTrue();
// } 
// alert(getResult(falseLogin));
// -------------------------------------------------------------


//  _________________________________________________________________________________________________________________________

// 4. Написать программу, которая вычисляет сумму чисел от 1 до n. Значение n вводится с клавиатуры.
// Проверить число n на корректность (чтобы это было число, чтобы оно не было меньше 1, чтобы это было не null)

// function summ (maxNumber)  {
//     let sum = 0;
//     if (maxNumber === null) {
//         return `Отменено`;
//     }
//     maxNumber = +maxNumber;
//     if ( isNaN(maxNumber) || maxNumber < 1)  {
//         return `Введите корректное число большее 1`;
//     } else {
//         for (let i = 0; i <= maxNumber; i++) {
//             sum += i;
//         }
//     }
//     return sum;
// }
// alert (summ (prompt(`Введите максимальное число диапазона, больше 1`)));

//  _________________________________________________________________________________________________________________________

// 5. Написать программу, которая определяет количество положительных, отрицательных чисел и нулей. В начале программы, пользователь самостоятельно
// задает какое количество чисел будет вводить, затем вводит сами числа. Пример вывода: «Положительных: 2 шт. Отрицательных: 5 шт. Нулей: 3 шт.»

// function counter (numbers) {
//     let counterBiggerThanZero = 0;
//     let counterLowerThanZero = 0;
//     let counterZero = 0;
//     for (let i = 0; i < numbers; i++) {
//         let num = +prompt(`Введите число`);
//         if (num === 0){
//             counterZero++;
//         } else if (num > 0){
//             counterBiggerThanZero++;
//         } else if (num < 0){
//             counterLowerThanZero++;
//         }
//     }
//     return `Положительных - ${counterBiggerThanZero}, Отрицательных - ${counterLowerThanZero}, Нулей - ${counterZero}`
// }
// alert (counter(+prompt(`Введите число`)));

//  _________________________________________________________________________________________________________________________

// 6. Написать программу, которая просит ввести с клавиатуры 10 пар чисел, сравнивает эти числа и выводит большие из них. (Используйте массив)

    // function getBigger (number1, number2) {
    //     if (number1 > number2) {
    //     return number1;
    //     } else {
    //     return number2;
    //     }
    // }  
    // function getArr (){
    //     let arr = [];
    //     for(let i = 0; i < 10; i++){
    //         number1 = +prompt(`Введите первое число из пары`);
    //         number2 = +prompt(`Введите второе число из пары`);
    //         arr.push(getBigger(number1 ,number2));
    //     }
    //     return alert(arr);
    // }
    // getArr ();

//  _________________________________________________________________________________________________________________________

// 7. Написать программу, которая выводит на экран двузначные числа, которые делятся на 4, но не делятся на 6.

// function getTrueNumbers (a,b) {
//     let arr = [];
//     for (let i = a; i >= a && i <= b; i +=2){
//         if ( i%4 === 0 && i%6 !== 0 ){
//             arr.push(i);
//         }
// } alert (arr);
// }
// getTrueNumbers (+prompt(`Введите начальное число диапазона`), +prompt(`ведите максимальное число диапазона`)); 

//  _________________________________________________________________________________________________________________________

// 8. Написать программу, которая выводит среднее арифметическое n чисел введенных пользователем. Ввод чисел прекращается тогда, когда нажали «отмена», после чего выводится среднее арифметическое.

// function AaverageNumber () {
// let counternumbers = 0;
// let sumNumbers = 0;
// for (;;) {
//     let currentRandomNumbers = prompt(`Введите число`);
//     sumNumbers += Number(currentRandomNumbers);
//     if (currentRandomNumbers === null || currentRandomNumbers === "") {
//         break;
//     }
//     counternumbers++;
//     } alert (sumNumbers/counternumbers);
// } 
// AverageNumber ();




