// let fruits = ["Яблоко", `Апельсин`,`Банан`];
// fruits [1] = `Мандарин`; // Заменили 2 элемент в массиве
// fruits [3] = `Лайм`; // Добавили новый элемент в конец
// alert (fruits[3]);
// alert (fruits.length); //4 элемента находятся в массиве


// pop____________________________________________

// let fruits = ["Яблоко", `Апельсин`,`Банан`];
// alert (fruits.pop())  // удалили последний элемент из массива и  вывели его
// alert (fruits.length); 

// push____________________________________________

// let fruits = ["Яблоко", `Апельсин`,`Банан`];
// fruits.push("Мандарин", "Кокос");  // Добавили Мандарин и Кокос в конец массива;\
// alert (fruits.push("Груша", "Ананас"))  // добавили грушу и ананас в конец массива и вывели их  ------- Вызов fruits.push(...) равнозначен fruits[fruits.length] = ....
// alert (fruits);  

// Перебор элементов___________________________________________

// let numbers = [1,2,3,4,5];
// for ( let i = 0; i < numbers.length; i++ ) {
//     alert ( numbers[i] );
// } 

//  или будет выводиться значение элемента массива - Яблоко , Апельсин, Груша

// let arr = ["Яблоко", "Апельсин", "Груша"];
// for (let i = 0; i < arr.length; i++) {
//   alert( arr[i] );
// }

// for of ___________________________________________

// let fruits = ["Яблоко", "Апельсин", "Слива"];
// // проходит по значениям
// for (let fruit of fruits) {
//   alert( fruit );
// }


// o lenght ___________________________________________

// let numbers = [1, 2, 3, 4, 5];
// numbers.length = 2; // укорачиваем до двух элементов
// alert( numbers ); // [1, 2]
// numbers.length = 5; // возвращаем length как было
// alert( numbers[3] ); // undefined: значения не восстановились

// let numbers = [1, 2, 3, 4, 5];
// alert  [numbers.length + 1] = 6;
// alert (numbers);

// многомерные массивы___________________________________________

// let matrix = [
//               [1,2,3],
//               [4,5,6],
//               [7,8,9]
//             ]; 
// alert (matrix); // 1,2,3,4,5,6,7,8,9
// alert (matrix [1][1]); // 5  

// toString___________________________________________

// let arr = [1, 2, 3];
// alert( arr ); // 1,2,3
// alert( String(arr) === '1,2,3' ); // true    toString возвращает список элементов, разделённых запятыми.


// Давайте произведём 5 операций с массивом.
// Создайте массив styles с элементами «Джаз» и «Блюз».
// Добавьте «Рок-н-ролл» в конец.
// Замените значение в середине на «Классика». Ваш код для поиска значения в середине должен работать для массивов с любой длиной.
// Удалите первый элемент массива и покажите его.
// Вставьте «Рэп» и «Регги» в начало массива.


// Решение___________________________________________

// let styles = ["Джаз", "Блюз"];
// styles.push("Рок-н-ролл");
// styles [Math.floor((styles.length - 1) / 2)] = "Классика";
// styles.shift()  ;
// styles.unshift ('Рэп', 'Рэгги');
// alert (styles);
// alert (styles.length);



// Методы массивов--- splice___________________________________________


// arr.splice(index[, deleteCount, elem1, ..., elemN])
// Он начинает с позиции index, удаляет deleteCount элементов и вставляет elem1, ..., elemN на их место.


//  УДАЛЕНИЕ  ______________
// let arr = ["I", "go", "home"];  
// arr.splice (0,1); // Удаляем "I" , 0 это индекс, 1 это deleteCount
// alert (arr);

// УДАЛЕНИЕ И ДОБАВЛЕНИЕ НОВЫХ
// let arr = ["I",'go','home','with','you'];
// arr.splice (0, 3, "He", 'ran',); // удалили 3 первых элемента начиная с 0 и добавили he ran
// alert (arr);


// возврат массива из удалённых элементов _______________

// let arr = ["Я", "изучаю", "JavaScript", "прямо", "сейчас"];
// удалить 2 первых элемента
// let removed = arr.splice(0, 2);
// alert( removed ); // "Я", "изучаю" <-- массив из удалённых элементов



// Метод splice также может вставлять элементы без удаления, для этого достаточно установить deleteCount в 0:

// let arr = ["Я", "изучаю", "JavaScript"];
// // с позиции 2
// // удалить 0 элементов
// // вставить "сложный", "язык"
// arr.splice(2, 0, "сложный", "язык");
// alert( arr ); // "Я", "изучаю", "сложный", "язык", "JavaScript"


// Если отрицательный индекс, то последний индекс элекмента - число отрицательное и оттуда пойдет :

// let arr = [1, 2, 5];
// // начиная с индекса -1 (перед последним элементом)
// // удалить 0 элементов,
// // затем вставить числа 3,5,7,9,4
// arr.splice(-1, 0, 3,5,7,9,4);
// alert( arr ); // 1,2,3,5,7,9,4,5

// Методы массивов--- slice___________________________________________

// arr.slice([start], [end])
// Он возвращает новый массив, в который копирует элементы, начиная с индекса start и до end (не включая end). 

// let arr = ["t", "e", "s", "t"];
// alert( arr.slice(1, 4) ); // e,s (копирует с 1 до 4)
// alert( arr.slice(-2) ); // s,t (копирует с -2 до конца)



// Методы массивов--- concat___________________________________________

// Метод arr.concat создаёт новый массив, в который копирует данные из других массивов и дополнительные значения.
// arr.concat(arg1, arg2...)
// let arr = [1, 2];
// // создать массив из: arr и [3,4]
// alert( arr.concat([3, 4]) ); // 1,2,3,4
// // создать массив из: arr и [3,4] и [5,6]
// alert( arr.concat([3, 4], [5, 6]) ); // 1,2,3,4,5,6
// // создать массив из: arr и [3,4], потом добавить значения 5 и 6
// alert( arr.concat([3, 4], 5, 6) ); // 1,2,3,4,5,6


// Методы массивов Перебор: forEach ___________________________________________

// Метод arr.forEach позволяет запускать функцию для каждого элемента массива.
// arr.forEach(function(item, index, array) {
//  ... делать что-то с item
//   });


// Вызов alert для каждого элемента
// ["Bilbo", "Gandalf", "Nazgul"].forEach(alert);


// Поиск___________________________________________


// let arr = [1, 0, "Василий", false];
// alert( arr.indexOf("Василий") ); // 2
// alert( arr.indexOf(false) ); // 3
// alert( arr.indexOf(null) ); // -1
// alert( arr.includes("Василий") ); // true


// отличием includes является то, что он правильно обрабатывает NaN в отличие от indexOf/lastIndexOf: ________________

// const arr = [NaN];
// alert( arr.indexOf(NaN) ); // -1 (должен быть 0, но === проверка на равенство не работает для NaN)
// alert( arr.includes(NaN) );// true (верно)


// let str = "привет";
// alert ( str.split('')); // п,р,и,в,е,т